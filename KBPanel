import java.util.*;
import javax.swing.*;
import java.util.*;
import java.io.*;
import java.awt.*;
import java.awt.event.*;
import java.awt.image.*;
import javax.imageio.*;
import java.lang.*;

public class KBPanel extends JPanel implements MouseMotionListener, MouseListener{
	private static BufferedImage endTurnButtonDisabled;
	private static BufferedImage endTurnButtonEnabled;
	private static BufferedImage useTileButtonDisabled;
	private static BufferedImage useTileButtonEnabled;
	//private static BufferedImage board1, board2, board3, board4, board5, board6, board7, board8;
	//private BufferedImage[] boards = {board1, board2, board3, board4, board5, board6, board7, board8};
	private Board board;
	private KBNode[][] boardHexes;
	private static ObjectiveCard[] objCards;
	private ArrayList<ObjectiveCard> objCardsChosen = new ArrayList<ObjectiveCard>();
	private ArrayList<Integer> boardsPainted = new ArrayList<Integer>();
	//private KBNode[][] hexes;
	private ArrayList <Polygon> hexCoords = new ArrayList <Polygon>();


	private static BufferedImage  beigeSettlement, blueSettlement, blackSettlement, orangeSettlement;
	private int playerTurn;

	private static BufferedImage background;
	private Button endTurnButton;
	private static BufferedImage pSlot1;
	private static BufferedImage pSlot2;
	private static BufferedImage pSlot3;
	private static BufferedImage pSlot4;
	private boolean turnOver, continueClicked;
	
	public PlayerSlot playerOne = new PlayerSlot(0);
	public PlayerSlot playerTwo = new PlayerSlot(1);
	public PlayerSlot playerThree = new PlayerSlot(2);
	public PlayerSlot playerFour = new PlayerSlot(3);



	public KBPanel() {
		
	addMouseListener(this);
	addMouseMotionListener(this);
	try {
		beigeSettlement = ImageIO.read(this.getClass().getResource("/Images/beigeSettlement.png"));
		blackSettlement = ImageIO.read(this.getClass().getResource("/Images/blackSettlement.png"));
		blueSettlement = ImageIO.read(this.getClass().getResource("/Images/blueSettlement.png"));
		orangeSettlement = ImageIO.read(this.getClass().getResource("/Images/orangeSettlement.png"));

		
	}catch(Exception e) { System.out.println("Can't read images"); }

	
	try {

		endTurnButtonDisabled = ImageIO.read(this.getClass().getResource("/Images/EndTurnButtonDisabled.png"));
		endTurnButtonEnabled = ImageIO.read(this.getClass().getResource("/Images/EndTurnButtonEnabled.png"));
		useTileButtonDisabled = ImageIO.read(this.getClass().getResource("/Images/UseTileButtonDisabled.png"));
		useTileButtonEnabled = ImageIO.read(this.getClass().getResource("/Images/UseTileButtonEnabled.png"));


	} catch (Exception e) { System.out.println("Error"); }
	
	try {
		background = ImageIO.read(this.getClass().getResource("/Images/Background.png"));
		pSlot1 =ImageIO.read(this.getClass().getResource("/Images/Player1Slot.png"));
		pSlot2 = ImageIO.read(this.getClass().getResource("/Images/Player2Slot.png"));
		pSlot3 =ImageIO.read(this.getClass().getResource("/Images/Player3Slot.png"));
		pSlot4 = ImageIO.read(this.getClass().getResource("/Images/Player4Slot.png"));

	} catch (Exception e) { System.out.println("Can't read player slots and the background"); }
	
	objCards = new ObjectiveCard[10];
	try {
		objCards[0] = new ObjectiveCard("Citizen", ImageIO.read(this.getClass().getResource("/Images/CitizenCard.png")));
		objCards[1] = new ObjectiveCard("Discoverer", ImageIO.read(this.getClass().getResource("/Images/DiscovererCard.png")));
		objCards[2] = new ObjectiveCard("Farmer", ImageIO.read(this.getClass().getResource("/Images/FarmerCard.png")));
		objCards[3] = new ObjectiveCard("Fishermen", ImageIO.read(this.getClass().getResource("/Images/FishermenCard.png")));
		objCards[4] = new ObjectiveCard("Hermit", ImageIO.read(this.getClass().getResource("/Images/HermitCard.png")));
		objCards[5] = new ObjectiveCard("Knight", ImageIO.read(this.getClass().getResource("/Images/KnightCard.png")));
		objCards[6] = new ObjectiveCard("Lord", ImageIO.read(this.getClass().getResource("/Images/LordCard.png")));
		objCards[7] = new ObjectiveCard("Merchant", ImageIO.read(this.getClass().getResource("/Images/MerchantCard.png")));
		objCards[8] = new ObjectiveCard("Miner", ImageIO.read(this.getClass().getResource("/Images/MinerCard.png")));
		objCards[9] = new ObjectiveCard("Worker", ImageIO.read(this.getClass().getResource("/Images/WorkerCard.png")));

	} catch(Exception e) {System.out.println("Can't read objective cards");}
	endTurnButton = new Button(endTurnButtonDisabled, endTurnButtonEnabled);
	
	playerTurn = 0;
	board = new Board();
	board.choosePieces();
	board.buildGraph2();
	boardHexes = board.getBoardNodes();
	
	endTurnButton.setCenterCoords(571, 870);

	endTurnButton.setWidth(200);

	endTurnButton.setHeight(70);

	endTurnButton.setEnabled(false);
	
	
	
	pickObjCards();
	repaint();

	}
	
	
	public void pickObjCards() {
		int ind = 0;

		while(objCardsChosen.size() <= 3) {
			ind = (int)((Math.random()*9)+1);

			if(!(objCardsChosen.contains(objCards[ind])))
				objCardsChosen.add(objCards[ind]);
		}
	} 
	
	public void getHexCoords() {
		int[]x = new int[6], y = new int[6];
		for(int i= 0; i < 20; i++) {
			for(int j = 0; j < 20; j++) {
				x[0] = 403 + j*40 + (i%2 * 20);
				x[1] = 423 + j*40 + (i%2 * 20);
				x[2] = 443 + j*40 + (i%2 * 20);
				x[3] = 443 + j*40 + (i%2 * 20);
				x[4] = 423 + j*40 + (i%2 * 20);
				x[5] = 403 + j*40 + (i%2 * 20);
				
				y[0] = 165 + i*35;
				y[1] = 155 + i*35;
				y[2] = 165 + i*35;
				y[3] = 189 + i*35;
				y[4] = 200 + i*35;
				y[5] = 189 + i*35;
				
				
				board.bigBoard[i][j].setHex(new Polygon (x, y, 6));
				//hexCoords.add(new Polygon(x, y, 6 ));
				//System.out.println((hexes.get(i).getXCoords())[0] + " " + (hexes.get(i).getYCoords())[0]);
			}
			
		}
	}

	public void paint(Graphics g) {

	
	g.drawImage(background, 0, 0, 2000, 1500, null);
	g.drawImage(pSlot1, 44, 98, 312, 238, null);
	g.drawImage(pSlot2, 44, 587, 312, 238, null);
	g.drawImage(pSlot3, 1255, 98, 312, 238, null);
	g.drawImage(pSlot4, 1255, 587, 312, 238, null);
	
	g.drawImage(board.getBoardPiece(0).getImage(), 370, 120, 942, 567, null);
	g.drawImage(board.getBoardPiece(1).getImage(), 770, 120, 942, 567, null);
	g.drawImage(board.getBoardPiece(2).getImage(), 370, 470, 942, 567, null);
	g.drawImage(board.getBoardPiece(3).getImage(), 770, 470, 942, 567, null);
	//draw player slots
	playerOne.display(g);
	playerTwo.display(g);
	playerThree.display(g);
	playerFour.display(g);

	g.setColor(Color.WHITE);
	g.setFont(new Font("Times New Roman", Font.PLAIN, 23));

	g.drawString("Count: " + playerOne.getCount(), 78, 310);
	g.drawString("Count: " + playerTwo.getCount(), 78, 801);
	g.drawString("Count: " + playerThree.getCount(),1429 , 310);
	g.drawString("Count: " + playerFour.getCount(), 1429, 801);

	//draw player slots

	g.drawImage(objCardsChosen.get(0).display(), 10, 350, 130, 200, null);
	g.drawImage(objCardsChosen.get(1).display(), 135, 350, 130, 200, null);
	g.drawImage(objCardsChosen.get(2).display(), 265, 350, 130, 200, null);

	g.drawImage(objCardsChosen.get(0).display(), 10, 350, 130, 200, null);
	g.drawImage(objCardsChosen.get(1).display(), 135, 350, 130, 200, null);
	g.drawImage(objCardsChosen.get(2).display(), 265, 350, 130, 200, null);

	//set hex coords for every hex in board
	getHexCoords();
	g.setColor(Color.RED);
	
	// drawing settlements
	for(int i = 0; i < 20; i++) {
		for(int j = 0; j < 20; j++) {
			g.drawPolygon((board.bigBoard[i][j]).getXCoords(), (board.bigBoard[i][j]).getYCoords(), 6);
			/*System.out.print("[");
			for(int r = 0; r < 6; r++) {
				System.out.print(board.bigBoard[i][j].x[r] + ", ");
			}/*/	
			//System.out.println("]" );
			if((board.bigBoard[i][j]).getSettlement() != null) {
				if((board.bigBoard[i][j]).getSettlement().equals("Beige Settlement"))
					g.drawImage(beigeSettlement,(board.bigBoard[i][j]).getXCoords()[0]+2, (board.bigBoard[i][j]).getYCoords()[0] - 2, 30, 30, null);
				else if((board.bigBoard[i][j]).getSettlement().equals("Black Settlement"))
					g.drawImage(blackSettlement, (board.bigBoard[i][j]).getXCoords()[0]+2, (board.bigBoard[i][j]).getYCoords()[0] - 2, 30, 30, null);
				else if((board.bigBoard[i][j]).getSettlement().equals("Blue Settlement"))
					g.drawImage(blueSettlement, (board.bigBoard[i][j]).getXCoords()[0]+2, (board.bigBoard[i][j]).getYCoords()[0] - 2, 30, 30, null);
				else if((board.bigBoard[i][j]).getSettlement().equals("Orange Settlement"))
					g.drawImage(orangeSettlement, (board.bigBoard[i][j]).getXCoords()[0]+2, (board.bigBoard[i][j]).getYCoords()[0] - 2, 30, 30, null);
			}
		}
	}

	
	paintEndTurnButton(g);

	}
	int counterPlayerOne = playerOne.getPlayerClickCounter();
	int counterPlayerTwo = playerOne.getPlayerClickCounter();
	int counterPlayerThree = playerOne.getPlayerClickCounter();
	int counterPlayerFour = playerOne.getPlayerClickCounter();
	int threeOnly = 0;
	
	public void setNodeToBoard(int x, int y) {
		

		 for(int i = 0; i < board.bigBoard.length; i++) {
	        	for(int j = 0; j< board.bigBoard[0].length; j++) {
		        	if((board.bigBoard[i][j]).hex.contains(x, y)) {
		        		if(!(board.bigBoard[i][j].getType().equals("water"))&& !(board.bigBoard[i][j].getType().equals("castle"))&& !(board.bigBoard[i][j].getType().equals("mountain"))&&
		        		!(board.bigBoard[i][j].getType().equals("tavern"))&&!(board.bigBoard[i][j].getType().equals("paddock"))&&!(board.bigBoard[i][j].getType().equals("oasis"))&&
		        		!(board.bigBoard[i][j].getType().equals("oracle"))&&!(board.bigBoard[i][j].getType().equals("barn"))&&!(board.bigBoard[i][j].getType().equals("harbor"))&&!(board.bigBoard[i][j].getType().equals("tower"))) {
		        			if(!(board.bigBoard[i][j].hasSettlement())) {
			        			if(playerTurn==0 && turnOver == false) {
			        				(board.bigBoard[i][j]).setSettlement("Orange Settlement");
			        				System.out.println("PlayerOne counter " + counterPlayerOne + "");
			        				
			        				counterPlayerOne++;
			        				if(threeOnly < 2) {
			        					playerOne.removeSettlement();

				        				if(counterPlayerOne < 2) {
				        					endTurnButton.setEnabled(false);
				        					
				        				}else if(counterPlayerOne > 2){
				        					endTurnButton.setEnabled(true);
				        					counterPlayerOne = 0;
				        					turnOver = true;
				        					//playerTurn++;
				        					
				        				}
				        				
			        				}

			        				
			        			}
			        			if(playerTurn==1 && turnOver == false) {
			        				(board.bigBoard[i][j]).setSettlement("Black Settlement");
			        				System.out.println("PlayerTwo counter" + counterPlayerTwo + "");

			        				counterPlayerTwo++;
			        				playerTwo.removeSettlement();

			        				
			        				if(counterPlayerTwo < 2) {
			        					endTurnButton.setEnabled(false);
			        					
			        				}else if(counterPlayerTwo > 2){
			        					endTurnButton.setEnabled(true);
			        					counterPlayerTwo = 0;
			        					turnOver = true;
			        					//playerTurn++;


			        			
			        				}
			        						        			}
			        			if(playerTurn==2 && turnOver == false) {
			        				(board.bigBoard[i][j]).setSettlement("Blue Settlement");
			        				counterPlayerThree++;
			        				playerThree.removeSettlement();

			        				
			        				if(counterPlayerThree < 2) {
			        					endTurnButton.setEnabled(false);
			        					
			        				}else if(counterPlayerThree > 2){
			        					endTurnButton.setEnabled(true);
			        					counterPlayerThree = 0;
			        					turnOver = true;
			        					//playerTurn++;
			        			
			        				}

			        			}
			        			if(playerTurn==3 && turnOver == false) {
			        				(board.bigBoard[i][j]).setSettlement("Beige Settlement");
			        				counterPlayerFour++;
			        				playerFour.removeSettlement();

			        				
			        				if(counterPlayerFour < 2) {
			        					endTurnButton.setEnabled(false);
			        					
			        				}else if(counterPlayerFour > 2){
			        					endTurnButton.setEnabled(true);
			        					counterPlayerFour = 0;
			        					turnOver = true;
			        					//playerTurn = 0;
			        			
			        				}

			  
			        			}
		        			}
		        		}
		        	}
	        	}
	        }
	}

	public void paintEndTurnButton(Graphics g) {

	endTurnButton.display(g);

	}
	
	public void mouseClicked(MouseEvent e) {

	}
	public void mousePressed(MouseEvent e) {
		int x = e.getX(), y = e.getY();
		//System.out.println(x +", " + y);
		clickButton(x, y);
		
	}
	public void mouseReleased(MouseEvent e) {}
	public void mouseEntered(MouseEvent e) { }
	public void mouseExited(MouseEvent e) { }
	public void mouseDragged(MouseEvent e) { }
	public void mouseMoved(MouseEvent e) {}
	
	
	public void clickButton(int x, int y) {
    	setNodeToBoard(x,y);

		
		
        if (endTurnButton.isClicked(x, y)) {
            endTurnButton.setEnabled(false);
            turnOver = true;
            continueClicked = true;
            playerTurn++;

            /*if(threeOnly < 3) {
            	setNodeToBoard(x,y);
            	threeOnly++;
            }else {
            	playerTurn++;
            	
            }*/
            //keeps track of which player is playing
            //only allows players to place three at a time
            
            System.out.println("Print Player Turns: " + playerTurn);
            if(playerTurn > 3) 
            	playerTurn = 0;
            	turnOver = false;
            	endTurnButton.setEnabled(false);
            	
            
        }
        //set Settlement for each node 
        //setNodeToBoard(x,y);
       
        paintEndTurnButton(getGraphics());
        repaint();
        
    }
}
